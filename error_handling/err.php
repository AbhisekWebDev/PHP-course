<?php

    // Php code showing default error handling

    // Using die() or exit()
    $file = fopen("nonexistent.txt", "r") or die("Unable to open file!");


    // // PHP code to check errors

    // If file is not present then exit from script
    if( !file_exists("geeks.txt") ) die("File is not present");

    // If file is present then continue
    else $file = fopen("geeks.txt", "r");


    // Custom Error Handler - You can create your own error handler using set_error_handler().
    function customError($errno, $errstr) {
    echo "<b>Error:</b> [$errno] $errstr<br>";
    }
    set_error_handler("customError");

    // Trigger error
    echo($test);



    // Using try...catch with Exceptions
    try {
        throw new Exception("This is an exception");
    } 
    catch (Exception $e) {
        echo 'Caught exception: ',  $e->getMessage(), "\n";
    }



    // Error Reporting Configuration - Display all errors (during development):
    error_reporting(E_ALL);
    ini_set('display_errors', 1);



    // Turn off errors (for production):
    ini_set('display_errors', 0);



    // Logging Errors to a File
    ini_set("log_errors", 1);
    ini_set("error_log", "php-error.log");

    // Trigger an error
    echo($undefinedVar);



    // trigger_error() for Custom Errors
    $test = 2;
    if ($test < 5) {
        trigger_error("Value must be 5 or more", E_USER_WARNING);
    }



    // Handling Fatal Errors (PHP 7+) with set_exception_handler()
    function fatalErrorHandler($errno, $errstr, $errfile, $errline) {
        echo "Fatal error on line $errline in file $errfile: [$errno] $errstr";
    }
    set_error_handler("fatalErrorHandler");





    // Custom Error handling: Creating a custom error handler in PHP is quite simple. Create a function that 
    // can be called when a error has been occurred in PHP.
    
    // Syntax: error_function( $error_level, $error_message, $error_file, $error_line, $error_context)

    // Parameters: This function accepts five parameters as mentioned above and described below:  

        // $error_level: It is required parameter and it must be an integer. There are predefined error levels.

        // $error_message: It is required parameter and it is the message which user want to print.

        // $error_file: It is optional parameter and used to specify the file in which error has been occurred.

        // $error_line: It is optional parameter and used to specify the line number in which error has been 
        // occurred.

        // $error_context: It is optional parameter and used to specify an array containing every variable and 
        // their value when error has been occurred
    
    // error_level: These are the possible error level which are listed below: 

        // 1 : .E_ERROR :fatal runtime error execution of script has been halted
        // 2 : E_WARNING :non fatal runtime error execution of script has been halted
        // 4 : E_PARSE :compile time error it is generated by the parser
        // 8 :E_NOTICE :The script found something that might be an error
        // 16 :E_CORE_ERROR :Fatal errors that occurred during initial startup of script
        // 32 :E_CORE_WARNING :Non fatal errors that occurred during initial startup of script
        // 8191 :E_ALL :All errors and warning
    
    // set_error_handler() Function: After creating myerror() function need to set custom error handler because 
    // in normal way PHP handles it but if user doing custom error handling then user have to set it in place of 
    // argument and pass out myerror function as a string.



    // Custom error handler for warnings and notices
    function myerror($error_no, $error_msg) {
        echo "Error: [$error_no] $error_msg ";
        echo "\nNow Script will end";
        die();
    }

    set_error_handler("myerror");

    $a = 10;
    $b = 0;

    try {
        // This will throw a DivisionByZeroError in PHP 7+
        if ($b == 0) {
            // Manually trigger error (to be handled by set_error_handler)
            trigger_error("Division by zero", E_USER_WARNING);
        } else {
            echo($a / $b);
        }
    } catch (DivisionByZeroError $e) {
        echo "Fatal Error Caught: " . $e->getMessage();
        echo "\nNow Script will end";
        die();
    }



    // Types of Errors in PHP - 

        // Parse Errors (Syntax Errors) – Missing a semicolon, unclosed braces, etc.

        // Fatal Errors – Calling undefined functions or accessing non-existent classes.

        // Warning Errors – File inclusion failures (include()), etc.

        // Notice Errors – Using undefined variables, etc.

?>